// Generated by Dagger (https://dagger.dev).
package com.willbsp.habits.domain;

import com.willbsp.habits.data.repository.HabitRepository;
import com.willbsp.habits.domain.usecase.SaveHabitUseCase;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SaveHabitUseCase_Factory implements Factory<SaveHabitUseCase> {
  private final Provider<HabitRepository> habitRepositoryProvider;

  public SaveHabitUseCase_Factory(Provider<HabitRepository> habitRepositoryProvider) {
    this.habitRepositoryProvider = habitRepositoryProvider;
  }

  @Override
  public SaveHabitUseCase get() {
    return newInstance(habitRepositoryProvider.get());
  }

  public static SaveHabitUseCase_Factory create(Provider<HabitRepository> habitRepositoryProvider) {
    return new SaveHabitUseCase_Factory(habitRepositoryProvider);
  }

  public static SaveHabitUseCase newInstance(HabitRepository habitRepository) {
    return new SaveHabitUseCase(habitRepository);
  }
}
