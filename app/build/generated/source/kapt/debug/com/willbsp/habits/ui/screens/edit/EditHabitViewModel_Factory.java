// Generated by Dagger (https://dagger.dev).
package com.willbsp.habits.ui.screens.edit;

import androidx.lifecycle.SavedStateHandle;
import com.willbsp.habits.data.repository.HabitRepository;
import com.willbsp.habits.domain.usecase.SaveHabitUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class EditHabitViewModel_Factory implements Factory<EditHabitViewModel> {
  private final Provider<HabitRepository> habitsRepositoryProvider;

  private final Provider<SaveHabitUseCase> saveHabitUseCaseProvider;

  private final Provider<SavedStateHandle> savedStateHandleProvider;

  public EditHabitViewModel_Factory(Provider<HabitRepository> habitsRepositoryProvider,
      Provider<SaveHabitUseCase> saveHabitUseCaseProvider,
      Provider<SavedStateHandle> savedStateHandleProvider) {
    this.habitsRepositoryProvider = habitsRepositoryProvider;
    this.saveHabitUseCaseProvider = saveHabitUseCaseProvider;
    this.savedStateHandleProvider = savedStateHandleProvider;
  }

  @Override
  public EditHabitViewModel get() {
    return newInstance(habitsRepositoryProvider.get(), saveHabitUseCaseProvider.get(), savedStateHandleProvider.get());
  }

  public static EditHabitViewModel_Factory create(
      Provider<HabitRepository> habitsRepositoryProvider,
      Provider<SaveHabitUseCase> saveHabitUseCaseProvider,
      Provider<SavedStateHandle> savedStateHandleProvider) {
    return new EditHabitViewModel_Factory(habitsRepositoryProvider, saveHabitUseCaseProvider, savedStateHandleProvider);
  }

  public static EditHabitViewModel newInstance(HabitRepository habitsRepository,
      SaveHabitUseCase saveHabitUseCase, SavedStateHandle savedStateHandle) {
    return new EditHabitViewModel(habitsRepository, saveHabitUseCase, savedStateHandle);
  }
}
