// Generated by Dagger (https://dagger.dev).
package com.willbsp.habits.domain;

import com.willbsp.habits.data.repository.EntryRepository;
import com.willbsp.habits.domain.usecase.CalculateStreakUseCase;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CalculateStreakUseCase_Factory implements Factory<CalculateStreakUseCase> {
  private final Provider<EntryRepository> entryRepositoryProvider;

  public CalculateStreakUseCase_Factory(Provider<EntryRepository> entryRepositoryProvider) {
    this.entryRepositoryProvider = entryRepositoryProvider;
  }

  @Override
  public CalculateStreakUseCase get() {
    return newInstance(entryRepositoryProvider.get());
  }

  public static CalculateStreakUseCase_Factory create(
      Provider<EntryRepository> entryRepositoryProvider) {
    return new CalculateStreakUseCase_Factory(entryRepositoryProvider);
  }

  public static CalculateStreakUseCase newInstance(EntryRepository entryRepository) {
    return new CalculateStreakUseCase(entryRepository);
  }
}
