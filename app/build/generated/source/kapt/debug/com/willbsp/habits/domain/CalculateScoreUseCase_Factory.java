// Generated by Dagger (https://dagger.dev).
package com.willbsp.habits.domain;

import com.willbsp.habits.data.repository.EntryRepository;
import com.willbsp.habits.domain.usecase.CalculateScoreUseCase;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import java.time.Clock;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CalculateScoreUseCase_Factory implements Factory<CalculateScoreUseCase> {
  private final Provider<EntryRepository> entryRepositoryProvider;

  private final Provider<Clock> clockProvider;

  public CalculateScoreUseCase_Factory(Provider<EntryRepository> entryRepositoryProvider,
      Provider<Clock> clockProvider) {
    this.entryRepositoryProvider = entryRepositoryProvider;
    this.clockProvider = clockProvider;
  }

  @Override
  public CalculateScoreUseCase get() {
    return newInstance(entryRepositoryProvider.get(), clockProvider.get());
  }

  public static CalculateScoreUseCase_Factory create(
      Provider<EntryRepository> entryRepositoryProvider, Provider<Clock> clockProvider) {
    return new CalculateScoreUseCase_Factory(entryRepositoryProvider, clockProvider);
  }

  public static CalculateScoreUseCase newInstance(EntryRepository entryRepository, Clock clock) {
    return new CalculateScoreUseCase(entryRepository, clock);
  }
}
