// Generated by Dagger (https://dagger.dev).
package com.willbsp.habits.ui.screens.detail;

import androidx.lifecycle.SavedStateHandle;
import com.willbsp.habits.data.repository.HabitRepository;
import com.willbsp.habits.domain.usecase.CalculateScoreUseCase;
import com.willbsp.habits.domain.usecase.CalculateStreakUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DetailViewModel_Factory implements Factory<DetailViewModel> {
  private final Provider<HabitRepository> habitRepositoryProvider;

  private final Provider<SavedStateHandle> savedStateHandleProvider;

  private final Provider<CalculateScoreUseCase> calculateScoreUseCaseProvider;

  private final Provider<CalculateStreakUseCase> calculateStreakUseCaseProvider;

  public DetailViewModel_Factory(Provider<HabitRepository> habitRepositoryProvider,
      Provider<SavedStateHandle> savedStateHandleProvider,
      Provider<CalculateScoreUseCase> calculateScoreUseCaseProvider,
      Provider<CalculateStreakUseCase> calculateStreakUseCaseProvider) {
    this.habitRepositoryProvider = habitRepositoryProvider;
    this.savedStateHandleProvider = savedStateHandleProvider;
    this.calculateScoreUseCaseProvider = calculateScoreUseCaseProvider;
    this.calculateStreakUseCaseProvider = calculateStreakUseCaseProvider;
  }

  @Override
  public DetailViewModel get() {
    return newInstance(habitRepositoryProvider.get(), savedStateHandleProvider.get(), calculateScoreUseCaseProvider.get(), calculateStreakUseCaseProvider.get());
  }

  public static DetailViewModel_Factory create(Provider<HabitRepository> habitRepositoryProvider,
      Provider<SavedStateHandle> savedStateHandleProvider,
      Provider<CalculateScoreUseCase> calculateScoreUseCaseProvider,
      Provider<CalculateStreakUseCase> calculateStreakUseCaseProvider) {
    return new DetailViewModel_Factory(habitRepositoryProvider, savedStateHandleProvider, calculateScoreUseCaseProvider, calculateStreakUseCaseProvider);
  }

  public static DetailViewModel newInstance(HabitRepository habitRepository,
      SavedStateHandle savedStateHandle, CalculateScoreUseCase calculateScoreUseCase,
      CalculateStreakUseCase calculateStreakUseCase) {
    return new DetailViewModel(habitRepository, savedStateHandle, calculateScoreUseCase, calculateStreakUseCase);
  }
}
